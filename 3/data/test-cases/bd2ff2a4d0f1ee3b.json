{"uid":"bd2ff2a4d0f1ee3b","name":"Add Photo with Invalid Photo Type","fullName":"TESTS.test_post_add_pet_photo.TestAddPhotoToPet#test_add_pet_photo_invalid_photo_type","historyId":"fac4b45e44047a6c8ae7ae7a69a3cf8e","time":{"start":1694861205418,"stop":1694861207087,"duration":1669},"description":"\n    Attempt to add a photo with an invalid photo type to an existing pet.\n\n    Precondition:\n    - User is authenticated and has a valid API key.\n    - There is at least one pet in the list.\n\n    Expected result:\n    - The request returns a 400 error code, and the photo is not added.\n    ","descriptionHtml":"<pre><code>Attempt to add a photo with an invalid photo type to an existing pet.\n\nPrecondition:\n- User is authenticated and has a valid API key.\n- There is at least one pet in the list.\n\nExpected result:\n- The request returns a 400 error code, and the photo is not added.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <TESTS.test_post_add_pet_photo.TestAddPhotoToPet object at 0x7f4201eae2b0>\nsetup_key = {'auth_key': 'f9cb3212c6ea16115e81a25c10e4d8bb05427eb6a8578cb4d482ff28'}\n\n    @allure.title(\"Add Photo with Invalid Photo Type\")\n    @allure.description(\"\"\"\n    Attempt to add a photo with an invalid photo type to an existing pet.\n    \n    Precondition:\n    - User is authenticated and has a valid API key.\n    - There is at least one pet in the list.\n    \n    Expected result:\n    - The request returns a 400 error code, and the photo is not added.\n    \"\"\")\n    def test_add_pet_photo_invalid_photo_type(self, setup_key):\n>       pf.add_pet_photo(setup_key, 0, ph_invalid, \"no\", 400)\n\nTESTS/test_post_add_pet_photo.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nAPI_Logic/AddPetPhoto.py:37: in add_pet_photo\n    self.assert_and_print(status, result, expected)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <API_Logic.AddPetPhoto.PetFriendsAddPhoto object at 0x7f4201eaed60>\nstatus = 500\nresult = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n<title>500 Internal Server Error</title>\\n<h1>Internal Serve...nd was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>\\n'\nexpected = 400\n\n    def assert_and_print(self, status, result, expected):\n>       assert status == expected\nE       AssertionError\n\nAPI_Logic/PetFriends.py:32: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_key","time":{"start":1694861204936,"stop":1694861205417,"duration":481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Attempt to add a photo with an invalid photo type to an existing pet.\n\n    Precondition:\n    - User is authenticated and has a valid API key.\n    - There is at least one pet in the list.\n\n    Expected result:\n    - The request returns a 400 error code, and the photo is not added.\n    ","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <TESTS.test_post_add_pet_photo.TestAddPhotoToPet object at 0x7f4201eae2b0>\nsetup_key = {'auth_key': 'f9cb3212c6ea16115e81a25c10e4d8bb05427eb6a8578cb4d482ff28'}\n\n    @allure.title(\"Add Photo with Invalid Photo Type\")\n    @allure.description(\"\"\"\n    Attempt to add a photo with an invalid photo type to an existing pet.\n    \n    Precondition:\n    - User is authenticated and has a valid API key.\n    - There is at least one pet in the list.\n    \n    Expected result:\n    - The request returns a 400 error code, and the photo is not added.\n    \"\"\")\n    def test_add_pet_photo_invalid_photo_type(self, setup_key):\n>       pf.add_pet_photo(setup_key, 0, ph_invalid, \"no\", 400)\n\nTESTS/test_post_add_pet_photo.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nAPI_Logic/AddPetPhoto.py:37: in add_pet_photo\n    self.assert_and_print(status, result, expected)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <API_Logic.AddPetPhoto.PetFriendsAddPhoto object at 0x7f4201eaed60>\nstatus = 500\nresult = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n<title>500 Internal Server Error</title>\\n<h1>Internal Serve...nd was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>\\n'\nexpected = 400\n\n    def assert_and_print(self, status, result, expected):\n>       assert status == expected\nE       AssertionError\n\nAPI_Logic/PetFriends.py:32: AssertionError","steps":[],"attachments":[{"uid":"5f6bc794b1d58f45","name":"stdout","source":"5f6bc794b1d58f45.txt","type":"text/plain","size":37}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_key::0","time":{"start":1694861207095,"stop":1694861207095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Add Photo to Pet"},{"name":"suite","value":"Add Photo to Pet"},{"name":"parentSuite","value":"TESTS"},{"name":"subSuite","value":"TestAddPhotoToPet"},{"name":"host","value":"fv-az246-628"},{"name":"thread","value":"2285-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TESTS.test_post_add_pet_photo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"11789ec5361eca60","reportUrl":"https://eeefimov.github.io/PetFriends_API_tests/2//#testresult/11789ec5361eca60","status":"failed","statusDetails":"AssertionError","time":{"start":1694861040132,"stop":1694861041937,"duration":1805}},{"uid":"d9aa00f09c4c9973","reportUrl":"https://eeefimov.github.io/PetFriends_API_tests/1//#testresult/d9aa00f09c4c9973","status":"failed","statusDetails":"AssertionError","time":{"start":1694860204744,"stop":1694860206532,"duration":1788}}]},"tags":[]},"source":"bd2ff2a4d0f1ee3b.json","parameterValues":[]}